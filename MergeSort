public class Mergesort {
    static int[] sorted; //원소를 담을 입시 배열
    public static void main(String[] args) {
        int arrSize = 16 ;
        int arr[] = new int[arrSize+1];

        for(int i=1; i<= arrSize; i++)
            arr[i] = (int)(java.lang.Math.random()*99);

        System.out.println("정렬 전:");
        for(int i=1; i<= arrSize; i++)
            System.out.print("  " + arr[i]);
        System.out.println();



        System.out.println("정렬후:");
        for(int i=1; i<= arrSize; i++)
            System.out.print("  " + arr[i]);

    }
        static void MergeSortClass(int[] a, int left, int right) {
            {

                if (left == right) return;    //하나씩 남으면  리턴
                int mid = (left + right) / 2;

                MergeSortClass(a, left, mid); // 원소가 하나 남을떄 까지 재귀 호출
                MergeSortClass(a, mid + 1, right);// 원소가 하나 남을떄 까지 재귀 호출
                Merge(a, left, mid, right); //각 각 하나씩 남은걸 통합
            }
        }
        static void Merge(int a[],int left,int mid,int right){
            int l=left;   //왼쪽 부분 리스트 시작
            int r=mid + 1; //오른 쪽 부분 리스트 시작
            int idx=left; //통합 인데스

            while(l<=mid && r<=right){ //원쪽,오른쪽 어느 한쪽이 끝까지 도달할때 까지

                if(a[l]<=a[r]){  //원쪽 리스트의 원소가 작으면
                    sorted[idx]=a[l];  //임시배열에 저장
                    idx++;
                    l++;
                }
                else{
                    sorted[idx]=a[r]; //오른쪽 리스트의 원소가 작으면
                    idx++;          //임시배열에 저장
                    r++;
                }
            }
            //어느 한쪽이 먼저 끝에 도착하면 while 끝

            if(l>mid){   // 왼쪽 리스트의 원소가 먼저 끝났을시
                while(r<=right){  //오른쪽 리스트의 원소를 차례대로 추가
                    sorted[idx]=a[r];
                    idx++;
                    r++;
                }
            }
            else {
                while(l <= mid) {// 오른쪽 리스트의 원소가 먼저 끝났을시
                    sorted[idx] = a[l];//왼쪽 리스트의 원소를 차례대로 추가
                    idx++;
                    l++;
                }
            }
                for(int i = left; i <= right; i++) {  //임시배열의 원소를 원래 배열에 저장
                    a[i] = sorted[i];
                }

        }

}
